# Docker Compose configuration for Hackathon Express API
# Includes all necessary services for development and testing

version: '3.8'

# =============================================================================
# SERVICES
# =============================================================================
services:
  # Main API service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: hackathon-api
    ports:
      - "3000:3000"
      - "9229:9229" # Debug port
    environment:
      - NODE_ENV=development
      - PORT=3000
      - HOST=0.0.0.0
      - MONGODB_URI=mongodb://mongodb:27017/hackathon_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PG_HOST=postgres
      - PG_PORT=5432
      - PG_DATABASE=hackathon_db
      - PG_USERNAME=postgres
      - PG_PASSWORD=password
      - JWT_SECRET=development-jwt-secret-change-in-production
      - LOG_LEVEL=debug
      - ENABLE_MONGODB=true
      - ENABLE_REDIS=true
      - ENABLE_POSTGRESQL=true
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
      - ./package-lock.json:/app/package-lock.json
      - api-logs:/app/logs
      - api-uploads:/app/uploads
    depends_on:
      - mongodb
      - postgres
      - redis
    networks:
      - hackathon-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB database
  mongodb:
    image: mongo:7-jammy
    container_name: hackathon-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=hackathon_db
    volumes:
      - mongodb-data:/data/db
      - mongodb-config:/data/configdb
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - hackathon-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: hackathon-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=hackathon_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - hackathon-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d hackathon_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: hackathon-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass password
    volumes:
      - redis-data:/data
      - ./scripts/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - hackathon-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: hackathon-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./scripts/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./scripts/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - hackathon-network
    restart: unless-stopped
    profiles:
      - production

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: hackathon-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./scripts/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - hackathon-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: hackathon-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./scripts/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    depends_on:
      - prometheus
    networks:
      - hackathon-network
    restart: unless-stopped
    profiles:
      - monitoring

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  mongodb-data:
    driver: local
  mongodb-config:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  api-logs:
    driver: local
  api-uploads:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  hackathon-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# DEVELOPMENT OVERRIDES
# =============================================================================
# Use: docker-compose -f docker-compose.yml -f docker-compose.override.yml up
# File: docker-compose.override.yml (create separately for local overrides)
